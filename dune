;
; Copyright (C) BedRock Systems Inc. 2022-2024
; All rights reserved.
;
; This software is distributed under the terms of the BedRock Open-Source License.
; See the LICENSE-BedRock file in the repository root for details.

(env
 ; settings for both dev and release mode.
 ; Beware that "_" is really a wildcard rule. Placing rules later gives this error:
 ; > Error: This env stanza contains rules after a wildcard rule. These are going
 ; > to be ignored.
 (_
  (binaries
   (scripts/dummy-gen.awk as dummy-gen))
  (coq
   (flags
    (:standard
      ; temporarily disable verbose incompatible prefix warnings
      -w -notation-incompatible-prefix
      ;see https://gitlab.mpi-sws.org/iris/iris/-/blob/master/_CoqProject
      -w -notation-overridden
      ; Similar to notation warnings.
      -w -custom-entry-overridden
      -w -redundant-canonical-projection
      -w -ambiguous-paths
      ; Turn warning on hints into error:
      -w +automatic-prop-lowering
      -w +deprecated-hint-without-locality
      -w +deprecated-instance-without-locality
      -w +unknown-option
      -w +future-coercion-class-field))
   (coqdoc_flags
    --toc --toc-depth 2 --interpolate
    --index indexpage --no-lib-name --parse-comments
    --external https://plv.mpi-sws.org/coqdoc/iris/ iris
    --external https://plv.mpi-sws.org/coqdoc/stdpp/ stdpp
    --with-header /tmp/coqdocjs/extra/header.html
    --with-footer /tmp/coqdocjs/extra/footer.html))))

; Explain Dune how to find and build cpp2v binary
;
; TODO (PDS): This does not seem to play well with dune's cache. I've
; observed something like "build (v1), change two files, build (v2),
; revert one file, build (v3)" resulting in binary (v1) rather than
; (v3). Should we give up and add `universe`, or honor an environment
; variable to that effect for use by folks who are modifying cpp2v?
; Can we make the dependencies more meaningful? Is there a dune bug
; lurking here that we can isolate and fix? (This seems likely given
; the `source_tree` deps.)
;
(subdir build
 (env
  (release (env-vars (BUILD_TYPE Release)))
  (_ (env-vars (BUILD_TYPE Debug))))
 (rule
  (target llvm-lib-path.txt)
  (deps (universe))
  (action
   (with-outputs-to %{target}
    ; Compute path of the LLVM library. The output looks like one of:
    ; ```
    ; /opt/homebrew/Cellar/llvm/14.0.6/lib/libLLVM-14.dylib
    ; /opt/homebrew/Cellar/llvm@13/13.0.1/lib/libLLVM-13.dylib
    ; /usr/lib/llvm-13/lib/libLLVM-13.so
    ; ```
    ; and changes when upgrading LLVM.
    (pipe-outputs (run llvm-config --libfiles) (run sed "s/ /\\n/g")))))
 (rule
  (targets cpp2v cpp2v-make.log)
  (deps
    ; This code depends on the LLVM library, to try rebuilding `cpp2v` if LLVM
    ; is upgraded.
    ; TODO: Check this is sound — could `cmake` detect LLVM/Clang in other ways?
    ;
    ; TODO: llvm-config provides other data which seem relevant to how
    ; a generated cpp2v binary will behave: cxxflags, ldflags (≈ how
    ; llvm+cmake likely conspire to build cpp2v).
    ;
    %{read-lines:llvm-lib-path.txt}
    ;
    ; We care about `$(MAKEFILE_LIST)` because we use `make` to invoke `cmake`
    ; and any makefile can, in principle, change what `make` does.
    ;
    ../Makefile
    ../CMakeLists.txt
    (source_tree ../include)
    (source_tree ../llvm-include)
    (source_tree ../src)
    (env_var PATH)
    (env_var LLVM_DIR)
    (env_var CLANG_DIR)
    (env_var BUILD_TYPE)
  )
  (action (chdir .. (run make -j 7 cpp2v))))
 ; The install rule is also necessary to _use_ cpp2v in other actions
 (install
  (section bin)
  (files cpp2v)
  (package coq-cpp2v-bin)))

(alias (name cpp2v.install) (deps coq-cpp2v-bin.install))
