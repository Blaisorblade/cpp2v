##
## Copyright (c) 2020 BedRock Systems, Inc.
## This software is distributed under the terms of the BedRock Open-Source License.
## See the LICENSE-BedRock file in the repository root for details.
##

################################################
# This file configures the cpp2v CI/CD pipelines.
#
# There are two pipelines:
#
#   1. build_latest -> test_latest
#
#      This builds and tests cpp2v against the current
#      major version of llvm.
#      In fact, "latest" does not depend on the latest version, but on the main
#      supported one.
#
#   2. build_alternate -> test_alternate
#
#      This builds cpp2v against the alternate major
#      version of llvm. It tests only the cpp2v
#      frontend.
#
# The build* jobs extend the .build template job.
# The test* jobs extend the .test template job.
#
# NOTE: If you need to change the base software in a
# container image used in a pipeline, first update
# Dockerfile and push a new image to the registry
# (see Dockerfile for more information).
################################################

variables:
  LLVM_CUR_MAJ_VER: "12"
  docker_img_prefix: registry.gitlab.com/bedrocksystems/docker-image
  fm_docs_img: ${docker_img_prefix}:fm-docs

# Configs
.latest:
  image: ${docker_img_prefix}:cpp2v-llvm${LLVM_CUR_MAJ_VER}
  variables:
    LLVM_MAJ_VER: ${LLVM_CUR_MAJ_VER}

.alternate:
  image: ${docker_img_prefix}:cpp2v-llvm10
  variables:
    LLVM_MAJ_VER: 10

.public:
  image: ${docker_img_prefix}:cpp2v-public-llvm12
  variables:
    LLVM_MAJ_VER: 12

stages:
  - build
  - test
  - release
  - prepare_pages
  - pages
  - prepare_env_for_downstream
  - build_proofs_downstream

#This is a template job that's extended below by the real jobs
# build_{latest,alternate,public} (see, e.g., https://docs.gitlab.com/ee/ci/yaml/#extends).
.build_base:
  stage: build
  script:
    - mkdir -p build
    - echo "fmdeps/cpp2v-core:$(git rev-parse HEAD)" | tee build/gitshas.txt
    - cd build; CC=`llvm-config-${LLVM_MAJ_VER} --bindir`/clang CXX=`llvm-config-${LLVM_MAJ_VER} --bindir`/clang++ cmake -DLLVM_CONFIG=`which llvm-config-${LLVM_MAJ_VER}` ../; cd ..
    - make -j ${NJOBS} cpp2v
    - make -j ${NJOBS} coq
    - rm -f build/bedrock
    - cp -a theories build/bedrock
  artifacts:
    name: cpp2v-${LLVM_MAJ_VER}
    paths:
      - build/gitshas.txt
      - build/cpp2v
      - build/bedrock
  tags:
    - fm.shared

# Build both the merge request job, and the branch job, whose artifact is to be
# used downstream.
.build:
  extends: .build_base
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_COMMIT_BRANCH # == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

# Build only the merge request job
.build_aux:
  extends: .build_base
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID

.test:
  stage: test
  script:
    - coqc -v
    - opam list
    - ./build/cpp2v --cpp2v-version 0 --
    - PATH=`llvm-config-${LLVM_MAJ_VER} --bindir`:`pwd`/build:$PATH make -C cpp2v-tests -j ${NJOBS} TIMED=1 QPATH=`pwd`/build/bedrock
  rules:
    # This is a negated if.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
  tags:
    - fm.shared

build_latest:
  extends:
    - .build
    - .latest
  after_script:
    # ARTIFACT_JOB_ID is used for downstream jobs to get artifacts from
    # this build. The value of CI_JOB_ID is only available in this
    # build_latest job, so it has to be stored here.
    - echo "ARTIFACT_JOB_ID=$CI_JOB_ID" >> build.env
  artifacts:
    reports:
      dotenv: build.env

build_alternate:
  extends:
    - .build_aux
    - .alternate

build_public:
  extends:
    - .build_aux
    - .public

test_latest:
  extends:
    - .test
    - .latest
  needs:
    - build_latest

test_alternate:
  extends:
    - .test
    - .alternate
  needs:
    - build_alternate

test_public:
  extends:
    - .test
    - .public
  needs:
    - build_public

prepare_env:
  extends:
    - .latest
  stage: prepare_env_for_downstream
  needs:
    - build_latest
  script:
    # The branch of cpp2v is by default master,
    # but if CI::cpp2v-same-branch label is specified,
    # the same branch name as the current MR
    - if [[ $CI_MERGE_REQUEST_LABELS =~ .*CI::cpp2v-same-branch.* ]]; then echo "CPP2V_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env; else echo "CPP2V_BRANCH=master" >> build.env; fi
    - echo "ARTIFACT_JOB_ID=$ARTIFACT_JOB_ID" >> build.env
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    reports:
      dotenv: build.env

.build_cpp2v_base:
  stage: build_proofs_downstream
  needs:
    - prepare_env
  trigger:
    project: bedrocksystems/cpp2v
    # If CPP2V_BRANCH is not master, .gitlab-ci.yml in the cpp2v branch has
    # to be modified to allow build_latest on branches.
    branch: $CPP2V_BRANCH
    # Currently, the whole pipeline succeeds even if the cpp2v build fails
  variables:
    UPSTREAM_CPP2V_CORE_JOB_ID: $ARTIFACT_JOB_ID

build_cpp2v:
  extends: .build_cpp2v_base
  trigger:
    strategy: depend
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

build_cpp2v_master:
  extends: .build_cpp2v_base
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

.release:
  stage: release
  script:
    - cp -r build cpp2v-core
  artifacts:
    name: cpp2v-${LLVM_MAJ_VER}
    paths:
      - cpp2v-core/cpp2v
      - cpp2v-core/bedrock
  only:
    - tags
    - master

release_latest:
  extends:
    - .release
    - .latest
  needs:
    - build_latest

# release_alternate:
#   extends:
#   - .release
#   - .alternate
#   needs:
#     - build_alternate


prepare_pages:
  image: ${fm_docs_img}
  stage: prepare_pages
  needs:
    - build_latest
  variables:
    LLVM_MAJ_VER: ${LLVM_CUR_MAJ_VER}
  script:
    - sudo chown coq.coq -R .
    # Clone the Alectryon submodule, but only in the pages jobs
    - git submodule update --init
    # Beware: the trailing slash affects the semantics.
    # Excluded flags, compared to -a: -pgoD
    # --omit-dir-times because of https://stackoverflow.com/a/668049/53974 and
    # https://gitlab.com/bedrocksystems/cpp2v-core/-/jobs/1474918505#L1325
    # and --omit-link-times to be safe.
    - sudo rsync
        --exclude '*.vok' --exclude '*.vos' --exclude '*.v'
        -avc
        --omit-link-times --omit-dir-times
        build/bedrock/ theories
    - make touch_deps
    - make -j ${NJOBS} doc
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - doc/sphinx/_build
  tags:
    - fm.shared

pages:
  stage: pages
  # Just Gitlab's default.
  # TODO: an even lighter one would work, or maybe we
  # could move this step into prepare_pages somehow?
  image: ruby:2.5
  needs:
    - prepare_pages
  script:
    # Note: we inline the definition of the `make pages` rule to avoid a CI breakage which we
    # encountered when attempting to invoke `make pages` /after/ downloading the doc-artifacts
    # from the `prepare-pages` stage and /without/ pulling the `fm-docs` image.
    #
    # While there is likely a solution which allows us to continue using `make pages` directly,
    # we're taking the easy way out to avoid being nerd-sniped by CI.
    - cp -R doc/sphinx/_build/html public
  rules:
    # Run on master
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - public
  tags:
    - fm.shared
