##
## Copyright (c) 2020-2022 BedRock Systems, Inc.
## This software is distributed under the terms of the BedRock Open-Source License.
## See the LICENSE-BedRock file in the repository root for details.
##

################################################
# This file configures the cpp2v CI/CD pipelines.
#
# There are two pipelines:
#
#   1. build_latest -> test_latest
#
#      This builds and tests cpp2v against the current
#      major version of llvm.
#      In fact, "latest" does not depend on the latest version, but on the main
#      supported one.
#
#   2. build_llvmX -> test_llvmX
#
#      This builds cpp2v against an alternate major
#      version of llvm - llvmX. It tests only the cpp2v
#      frontend.
#
# The build* jobs extend the .build template job.
# The test* jobs extend the .test template job.
#
# NOTE: If you need to change the base software in a
# container image used in a pipeline, first update
# Dockerfile and push a new image to the registry
# (see Dockerfile for more information).
################################################

variables:
  LLVM_CUR_MAJ_VER: "13"
  docker_img_prefix: registry.gitlab.com/bedrocksystems/docker-image
  fm_docs_img: ${docker_img_prefix}:fm-docs
  img_prefix: cpp2v-llvm

# Configs
.base:
  image: ${docker_img_prefix}:${img_prefix}${LLVM_MAJ_VER}

.latest:
  extends: .base
  variables:
    LLVM_MAJ_VER: ${LLVM_CUR_MAJ_VER}

.llvm10:
  extends: .base
  variables:
    LLVM_MAJ_VER: 10

.public:
  extends: .base
  variables:
    img_prefix: cpp2v-public-llvm
    LLVM_MAJ_VER: 13

stages:
  - build
  - test
  - release
  - prepare_pages
  - pages
#  - prepare_env_for_downstream
#  - build_proofs_downstream
  - dune-build

#This is a template job that's extended below by the real jobs
# build_{latest,llvm10,public} (see, e.g., https://docs.gitlab.com/ee/ci/yaml/#extends).
.build_base:
  stage: build
  script:
    - mkdir -p build
    - echo "fmdeps/cpp2v-core:$(git rev-parse HEAD)" | tee build/gitshas.txt
    # NOTE: keep these settings in sync with the cpp2v-core repository: see
    # https://bedrocksystems.atlassian.net/browse/FM-1874.
    # We use `/usr/lib/llvm/bin/llvm-config` instead of
    # `llvm-config-${LLVM_MAJ_VER}` to avoid depending on the LLVM version.
    - export CC=`/usr/lib/llvm/bin/llvm-config --bindir`/clang
    - export CXX=`/usr/lib/llvm/bin/llvm-config --bindir`/clang++
    - cd build; cmake ../; cd ..
    - make -j ${NJOBS} cpp2v
    - make -j ${NJOBS} coq
    - rm -f build/bedrock
    - cp -a theories build/bedrock
  artifacts:
    name: cpp2v-${LLVM_MAJ_VER}
    paths:
      - build/gitshas.txt
      - build/cpp2v
      - build/bedrock
  tags:
    - fm.shared

# Build both the merge request job, and the branch job, whose artifact is to be
# used downstream.
.build:
  extends: .build_base
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_COMMIT_BRANCH # == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

# Build only the merge request job
.build_aux:
  extends: .build_base
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID

.test:
  stage: test
  script:
    - coqc -v
    - opam list
    - ./build/cpp2v --cpp2v-version 0 --
    - PATH=`llvm-config-${LLVM_MAJ_VER} --bindir`:`pwd`/build:$PATH make test -j ${NJOBS} TIMED=1 QPATH=`pwd`/build/bedrock
  rules:
    # This is a negated if.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
  tags:
    - fm.shared

build_latest:
  extends:
    - .build
    - .latest
  after_script:
    # ARTIFACT_JOB_ID is used for downstream jobs to get artifacts from
    # this build. The value of CI_JOB_ID is only available in this
    # build_latest job, so it has to be stored here.
    - echo "ARTIFACT_JOB_ID=$CI_JOB_ID" >> build.env
  artifacts:
    reports:
      dotenv: build.env

build_llvm10:
  extends:
    - .build_aux
    - .llvm10

build_public:
  extends:
    - .build_aux
    - .public

test_latest:
  extends:
    - .test
    - .latest
  needs:
    - build_latest

test_llvm10:
  extends:
    - .test
    - .llvm10
  needs:
    - build_llvm10

test_public:
  extends:
    - .test
    - .public
  needs:
    - build_public

#prepare_env:
#  extends:
#    - .latest
#  stage: prepare_env_for_downstream
#  needs:
#    - build_latest
#  script:
#    # The branch of cpp2v is by default master,
#    # but if CI::cpp2v-same-branch label is specified,
#    # the same branch name as the current MR
#    - if [[ $CI_MERGE_REQUEST_LABELS =~ .*CI::cpp2v-same-branch.* ]]; then echo "CPP2V_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env; else echo "CPP2V_BRANCH=master" >> build.env; fi
#    - echo "ARTIFACT_JOB_ID=$ARTIFACT_JOB_ID" >> build.env
#  rules:
#    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
#      when: never
#    - if: $CI_MERGE_REQUEST_IID
#    - if: $CI_COMMIT_TAG
#    - if: '$CI_COMMIT_BRANCH == "master"'
#  artifacts:
#    reports:
#      dotenv: build.env
#  tags:
#    - fm.shared
#
#.build_cpp2v_base:
#  stage: build_proofs_downstream
#  needs:
#    - prepare_env
#  trigger:
#    project: bedrocksystems/cpp2v
#    # If CPP2V_BRANCH is not master, .gitlab-ci.yml in the cpp2v branch has
#    # to be modified to allow build_latest on branches.
#    branch: $CPP2V_BRANCH
#    # Currently, the whole pipeline succeeds even if the cpp2v build fails
#  variables:
#    UPSTREAM_CPP2V_CORE_JOB_ID: $ARTIFACT_JOB_ID
#
#build_cpp2v:
#  extends: .build_cpp2v_base
#  trigger:
#    strategy: depend
#  rules:
#    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
#      when: never
#    - if: $CI_MERGE_REQUEST_IID
#    - if: $CI_COMMIT_TAG
#
#build_cpp2v_master:
#  extends: .build_cpp2v_base
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "master"'

.release:
  stage: release
  script:
    - cp -r build cpp2v-core
  artifacts:
    name: cpp2v-${LLVM_MAJ_VER}
    paths:
      - cpp2v-core/cpp2v
      - cpp2v-core/bedrock
  only:
    - tags
    - master

release_latest:
  extends:
    - .release
    - .latest
  needs:
    - build_latest

# release_llvm10:
#   extends:
#   - .release
#   - .llvm10
#   needs:
#     - build_llvm10


prepare_pages:
  image: ${fm_docs_img}
  stage: prepare_pages
  needs:
    - build_latest
  variables:
    LLVM_MAJ_VER: ${LLVM_CUR_MAJ_VER}
  script:
    - sudo chown coq.coq -R .
    # Clone the Alectryon submodule, but only in the pages jobs
    - git submodule update --init
    # Copy compiled code. Excluded until we can use a shared OCaml version
    # again.
    #
    # Beware: the trailing slash affects the semantics.
    # Excluded flags, compared to -a: -pgoD
    # --omit-dir-times because of https://stackoverflow.com/a/668049/53974 and
    # https://gitlab.com/bedrocksystems/cpp2v-core/-/jobs/1474918505#L1325
    # and --omit-link-times to be safe.
    # - sudo rsync
    #     --exclude '*.vok' --exclude '*.vos' --exclude '*.v'
    #     -avc
    #     --omit-link-times --omit-dir-times
    #     build/bedrock/ theories
    - make touch_deps
    - make -j ${NJOBS} doc
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - doc/sphinx/_build
  tags:
    - fm.shared

pages:
  stage: pages
  # Just Gitlab's default.
  # TODO: an even lighter one would work, or maybe we
  # could move this step into prepare_pages somehow?
  image: ruby:2.5
  needs:
    - prepare_pages
  script:
    # Note: we inline the definition of the `make pages` rule to avoid a CI breakage which we
    # encountered when attempting to invoke `make pages` /after/ downloading the doc-artifacts
    # from the `prepare-pages` stage and /without/ pulling the `fm-docs` image.
    #
    # While there is likely a solution which allows us to continue using `make pages` directly,
    # we're taking the easy way out to avoid being nerd-sniped by CI.
    - cp -R doc/sphinx/_build/html public

    # Note: in order to "push" up-to-date documentation to our public github repo /without/
    # muddying [master] we maintain a separate /protected/ branch called [gh-pages]. This branch
    # /will not/ track the actual contents of our repository; it is up for debate whether or not
    # we remove everything besides [brick/doc/]. Instead, every successful publish of the
    # /gitlab/ pages will also commit the new html artifacts to [brick/doc/@gh-pages] (replacing
    # the existing ones). We configure the [gh-pages] branch to be automatically mirrored to
    # github, and we configure github to use [gh-pages] as the branch for the public pages
    # documentation.
    #
    # Note: taken from here <https://forum.gitlab.com/t/is-it-possible-to-commit-artifacts-into-the-git/22218/7>
    - git clone https://${BRICK_BOT_USERNAME}:${BRICK_BOT_TOKEN}@gitlab.com/bedrocksystems/cpp2v-core.git # Clone repo
    - git remote set-url origin https://${BRICK_BOT_USERNAME}:${BRICK_BOT_TOKEN}@gitlab.com/bedrocksystems/cpp2v-core.git # git configuration
    # QUESTION (JH): Are these exposed within the (protected) [master] branch?
    - git config --global user.email "${BRICK_BOT_EMAIL}" && git config --global user.name "${BRICK_BOT_USERNAME}"
    - cd cpp2v-core
    # switch to our protected branch
    - git checkout gh-pages
    # remove the old documentation
    - git rm -r docs/
    # add the new documentation
    - cp -R ../doc/sphinx/_build/html docs && git add -f docs/
    - touch docs/.nojekyll
    - git add docs/.nojekyll
    - git diff-index --quiet HEAD ||
      ( git commit -m "[github pages] BRiCk documentation created from $CI_COMMIT_SHORT_SHA" ;
        git push origin gh-pages )
  rules:
    # Run on master
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - public
  tags:
    - fm.shared

.prepare_cpp2v_env: &prepare_cpp2v_env
  - >
    if [[ $CI_MERGE_REQUEST_LABELS =~ .*CI::same-branch.* ]] ; then
       echo "DOWNSTREAM_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env ;
       git ls-remote --exit-code --heads   https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/bedrocksystems/cpp2v.git refs/heads/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME &&
       echo "DOWNSTREAM_CPP2V_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env ||
       echo "DOWNSTREAM_CPP2V_BRANCH=master" >> build.env;
    else echo "DOWNSTREAM_CPP2V_BRANCH=master" >> build.env ;
         echo "DOWNSTREAM_BRANCH=master" >> build.env ; fi
  - CPP2V_CORE_COMMIT_HASH=$(git -C $CI_PROJECT_DIR rev-parse HEAD)
  - echo "CPP2V_CORE_COMMIT_HASH=$CPP2V_CORE_COMMIT_HASH" >> build.env
  - echo $CPP2V_CORE_COMMIT_HASH

.setup-dunecache:
  stage: dune-build
  before_script:
    # Create Directory structure for dune
    - mkdir -p /tmp/build-dir/fmdeps/ ~/.cache/ && cp -ra $CI_PROJECT_DIR /tmp/build-dir/fmdeps/cpp2v-core
    - time rsync -raz ${DUNE_USER}@${FM_CACHE_SERVER}:${RSYNC_CACHE_PATH}/dune_cache/ ~/.cache/
    - ls ~/.cache/dune
    - mkdir -p ~/.config/dune/ ; cp $CI_PROJECT_DIR/dune_config ~/.config/dune/config

.postupdate-dunecache:
  after_script:
    - rsync -raz ~/.cache/dune ${DUNE_USER}@${FM_CACHE_SERVER}:${RSYNC_CACHE_PATH}/dune_cache
    - ssh ${DUNE_USER}@${FM_CACHE_SERVER} bash -c "'echo `date  +%Y%m%d%H%M%S` - $CI_PROJECT_NAME - $CI_JOB_NAME - $CI_JOB_ID >> ${RSYNC_CACHE_PATH}/test_rsync_fm1.txt'"
    - *prepare_cpp2v_env

dune-build:
  extends:
    - .setup-dunecache
    - .postupdate-dunecache
  needs: []
  stage: dune-build
  image: ${docker_img_prefix}:cpp2v-llvm13-usermod-1
  variables:
    CPP2V_CORE: cpp2v-core
  script:
    - export PATH="/usr/lib/llvm/bin/:$PATH"
    - cd /tmp/build-dir/
    - cp fmdeps/${CPP2V_CORE}/dune-project.template dune-project
    - ln -sf fmdeps/${CPP2V_CORE}/coq-cpp2v-bin.opam coq-cpp2v-bin.opam
    - dune build -j ${NJOBS}
  tags:
    - ${DUNE_TAG}
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_MERGE_REQUEST_IID


#prepare_cpp2v_env:
#  stage: dune-build
#  extends:
#    - .latest
#  needs:
#    - dune-build
#  script:
#    - >
#      if [[ $CI_MERGE_REQUEST_LABELS =~ .*CI::same-branch.* ]] ; then
#         echo "DOWNSTREAM_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env ;
#         git ls-remote --exit-code --heads   https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/bedrocksystems/cpp2v.git refs/heads/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME &&
#         echo "DOWNSTREAM_CPP2V_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" >> build.env ||
#         echo "DOWNSTREAM_CPP2V_BRANCH=master" >> build.env;
#      else echo "DOWNSTREAM_CPP2V_BRANCH=master" >> build.env ;
#           echo "DOWNSTREAM_BRANCH=master" >> build.env ; fi
#    - CPP2V_CORE_COMMIT_HASH=$(git -C $CI_PROJECT_DIR rev-parse HEAD)
#    - echo "CPP2V_CORE_COMMIT_HASH=$CPP2V_CORE_COMMIT_HASH" >> build.env
#    - echo $CPP2V_CORE_COMMIT_HASH 
#  artifacts:
#    reports:
#      dotenv: build.env
#  tags:
#    - fm.shared
#  rules:
#    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
#      when: never
#    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/ && $CI_COMMIT_BRANCH && $CI_COMMIT_REF_NAME != "master"'
#      when: never
#    - if: '$CI_PIPELINE_SOURCE =~ /^(api|chat|external|external_pull_request_event)$/'
#      when: never
#    - when: always


build-cpp2v-trigger:
  stage: dune-build
  needs:
    - dune-build
  variables:
    UPSTREAM_CPP2V_CORE_COMMIT_HASH: $CPP2V_CORE_COMMIT_HASH
    DOWNSTREAM_BRANCH: $DOWNSTREAM_BRANCH
  trigger:
    project: bedrocksystems/cpp2v
    branch: $DOWNSTREAM_CPP2V_BRANCH
    strategy: depend
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*CI-skip-proofs.*/'
      when: never
    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/ && $CI_COMMIT_BRANCH && $CI_COMMIT_REF_NAME != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE =~ /^(api|chat|external|external_pull_request_event)$/'
      when: never
    - when: always