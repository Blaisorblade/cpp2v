#
# Copyright (C) BedRock Systems Inc. 2019 Gregory Malecha
#
# This software is distributed under the terms of the BedRock Open-Source License.
# See the LICENSE-BedRock file in the repository root for details.
#
# Some of the rules/logic are "... ADAPTED FROM [stdpp/Makefile.coq.local]". The original
# code is
#
#	Copyright: std++ developers and contributors
#
# and used according to the following license.
#
#	SPDX-License-Identifier: BSD-3-Clause
#
# Original code (tagged May 31, 2022):
#
# 	<https://gitlab.mpi-sws.org/iris/stdpp/-/blob/5b7d0bf68d9b0f4396f77c0d1bee8230368b7498/Makefile.coq.local>
#
# Original stdpp license:
#
#	<https://gitlab.mpi-sws.org/iris/stdpp/-/blob/5b7d0bf68d9b0f4396f77c0d1bee8230368b7498/LICENSE>
#

CPPFLAGS=-std=c++17
CFLAGS=-std=c99

CPP2V_RELATIVE = ../build/cpp2v
override CPP2V_WANT := $(abspath $(dir $(realpath $(lastword $(MAKEFILE_LIST))))/$(CPP2V_RELATIVE))
override CPP2V := $(realpath $(CPP2V_WANT))

# Force the cpp2v binary to exist rather than run the wrong recipes.
ifeq ($(CPP2V),)
ifneq ($(MAKECMDGOALS),cleanall)
$(error please compile $(CPP2V_WANT) and try again)
endif
endif

%_c.v: %.c $(CPP2V)
	$(CPP2V) -v -o $@ $< -- $(CFLAGS)
%_h.v: %.h $(CPP2V)
	$(CPP2V) -v -o $@ $< -- $(CFLAGS)
%_cpp.v: %.cpp $(CPP2V)
	$(CPP2V) -v -o $@ $< -- $(CPPFLAGS)
%_hpp.v: %.hpp $(CPP2V)
	$(CPP2V) -v -o $@ $< -- $(CPPFLAGS)

%_c_names.v: %.c $(CPP2V)
	$(CPP2V) -v -names $@ $< -- $(CFLAGS)
%_h_names.v: %.h $(CPP2V)
	$(CPP2V) -v -names $@ $< -- $(CFLAGS)
%_cpp_names.v: %.cpp $(CPP2V)
	$(CPP2V) -v -names $@ $< -- $(CPPFLAGS)
%_hpp_names.v: %.hpp $(CPP2V)
	$(CPP2V) -v -names $@ $< -- $(CPPFLAGS)

################################################################################
### THE FOLLOWING IS ADAPTED FROM [stdpp/Makefile.coq.local] ###################
################################################################################

# Use NO_PRINTING_TESTS=1 to skip the notation tests
NO_PRINTING_TESTS?=

# Use MAKE_PRINTING_REFS=1 to generate new notation reference files
MAKE_PRINTING_REFS?=

real-all: $(if $(NO_PRINTING_TESTS),,printing-tests)

COQ_PRINTING_TEST?=$(COQTOP) $(COQDEBUG) -batch -test-mode

PRINTING_TESTFILES:=type_notation_tests.v expr_notation_tests.v stmt_notation_tests.v code_notation_tests.v wp_notation_tests.v

printing-tests: $(PRINTING_TESTFILES:.v=.vo)
.PHONY: printing-tests

# Main test script (comments out-of-line because macOS otherwise barfs?!?)
# - Determine reference file (`REF`).
# - Print user-visible status line.
# - unset env vars that change Coq's output
# - Dump Coq output into a temporary file.
# - Either compare the result with the reference file, or move it over the reference file.
# - Cleanup, and mark as done for make.
$(PRINTING_TESTFILES:.v=.vo): %.vo: %.v $(if $(MAKE_PRINTING_REFS),,%.ref)
	$(HIDE)REF=$*".ref" && \
	echo "COQ_PRINTING_TEST$(if $(MAKE_PRINTING_REFS), [make printing ref],) $< (printing ref: $$REF)" && \
	TMPFILE="$$(mktemp)" && \
	unset OCAMLRUNPARAM && \
	$(TIMER) $(COQ_PRINTING_TEST) $(COQFLAGS) $(COQLIBS) -load-vernac-source $< > "$$TMPFILE" && \
	$(if $(MAKE_PRINTING_REFS),mv "$$TMPFILE" "$$REF",diff --strip-trailing-cr -u "$$REF" "$$TMPFILE") && \
	rm -f "$$TMPFILE" && \
	touch $@